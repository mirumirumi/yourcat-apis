AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: your-cat

Globals:
  Function:
    MemorySize: 1111
    Timeout: 11
    Environment:
      Variables:
        API_ALLOW_ORIGIN: !Sub ${ApiAllowOrigin}
        ENV_NAME: !Sub ${EnvironmentName}


Parameters:
  ResourcePrefix:
    Type: String
    Default: yourcat
  EnvironmentName:
    Type: String
    AllowedValues:
      - dev
      - prd
  ApiAllowOrigin:
    Type: String


Resources:
  ImageS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ResourcePrefix}-${EnvironmentName}-image
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
            AllowedOrigins:
              - '*'
  ImageS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ImageS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ImageS3Bucket
                - /*
            Principal: '*'
  ImageDataCacheBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ResourcePrefix}-${EnvironmentName}-image-data-cache

  RestApis:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${ResourcePrefix}-${EnvironmentName}
      StageName: !Sub ${ResourcePrefix}-${EnvironmentName}-apis
      Cors:
        AllowOrigin: !Sub "'${ApiAllowOrigin}'"
        AllowHeaders: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key, X-Amz-Security-Token'"
        AllowMethods: "'POST, OPTIONS'"

  GetImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-${EnvironmentName}-get-image
      CodeUri: functions/get-image
      Handler: get_image
      Runtime: go1.x
      Architectures:
        - x86_64
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref ImageDataCacheBucket
      Environment:
        Variables:
          CACHE_BUCKET_NAME: !Ref ImageDataCacheBucket
      Events:
        RestApis:
          Type: Api
          Properties:
            RestApiId: !Ref RestApis
            Path: /get-image
            Method: get
  # IsTheCatFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: !Sub ${ResourcePrefix}-${EnvironmentName}-is-the-cat
  #     CodeUri: functions/
  #     Handler: is_the_cat
  #     Runtime: go1.x
  #     Architectures:
  #       - x86_64
  #     Policies:
  #       - RekognitionDetectOnlyPolicy: {}
  #     Events:
  #       RestApis:
  #         Type: Api
  #         Properties:
  #           RestApiId: !Ref RestApis
  #           Path: /is-the-cat
  #           Method: post
  # PostImageFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: !Sub ${ResourcePrefix}-${EnvironmentName}-post-image
  #     CodeUri: functions/
  #     Handler: post_image
  #     Runtime: go1.x
  #     Architectures:
  #       - x86_64
  #     Policies:
  #       - S3FullAccessPolicy:
  #           BucketName: !Ref ImageS3Bucket
  #       - S3FullAccessPolicy:
  #           BucketName: !Ref ImageDataCacheBucket
  #       - DynamoDBCrudPolicy:
  #           TableName: !Sub ${ResourcePrefix}-${EnvironmentName}-image
  #     Environment:
  #       Variables:
  #         Image_S3_BUCKET_NAME: !Ref ImageS3Bucket
  #         Cache_S3_BUCKET_NAME: !Ref ImageDataCacheBucket
  #         IMAGE_TABLE_NAME: !Sub ${ResourcePrefix}-${EnvironmentName}-image
  #     Events:
  #       RestApis:
  #         Type: Api
  #         Properties:
  #           RestApiId: !Ref RestApis
  #           Path: /post-image
  #           Method: post

  # UtilsLayer:
  #   Type: AWS::Serverless::LayerVersion
  #   Properties:
  #     Description: utils
  #     ContentUri: "utils_layer/"
  #     CompatibleRuntimes:
  #       - go1.x
  #   Metadata:
  #     BuildMethod: go1.x

  ImageDataDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Sub ${ResourcePrefix}-${EnvironmentName}-image
      KeySchema: 
        - AttributeName: file_id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: file_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST 
      # ProvisionedThroughput: 
      #   ReadCapacityUnits: 5
      #   WriteCapacityUnits: 5
  # ImageCountDynamoDBTable:
  #   Type: AWS::DynamoDB::Table
  #   Properties: 
  #     TableName: !Sub ${ResourcePrefix}-${EnvironmentName}-image-count
  #     KeySchema: 
  #       - AttributeName: type
  #         KeyType: HASH
  #     AttributeDefinitions: 
  #       - AttributeName: type
  #         AttributeType: S
  #     BillingMode: PROVISIONED
  #     ProvisionedThroughput: 
  #       ReadCapacityUnits: 5
  #       WriteCapacityUnits: 5

  # ImageDataRCUScalableTarget:
  #   Type: AWS::ApplicationAutoScaling::ScalableTarget
  #   DependsOn:
  #     - ImageDataDynamoDBTable
  #   Properties: 
  #     MinCapacity: 1
  #     MaxCapacity: 30
  #     ResourceId: !Join ["", ["table/", !Ref ImageDataDynamoDBTable]]
  #     RoleARN: !GetAtt AutoScalingRole.Arn
  #     ScalableDimension: dynamodb:table:ReadCapacityUnits
  #     ServiceNamespace: dynamodb
  # ImageDataWCUScalableTarget:
  #   Type: AWS::ApplicationAutoScaling::ScalableTarget
  #   DependsOn:
  #     - ImageDataDynamoDBTable
  #   Properties: 
  #     MinCapacity: 10
  #     MaxCapacity: 40
  #     ResourceId: !Join ["", ["table/", !Ref ImageDataDynamoDBTable]]
  #     RoleARN: !GetAtt AutoScalingRole.Arn
  #     ScalableDimension: dynamodb:table:WriteCapacityUnits
  #     ServiceNamespace: dynamodb
  # ImageCountRCUScalableTarget:
  #   Type: AWS::ApplicationAutoScaling::ScalableTarget
  #   DependsOn:
  #     - ImageCountDynamoDBTable
  #   Properties: 
  #     MinCapacity: 1
  #     MaxCapacity: 30
  #     ResourceId: !Join ["", ["table/", !Ref ImageCountDynamoDBTable]]
  #     RoleARN: !GetAtt AutoScalingRole.Arn
  #     ScalableDimension: dynamodb:table:ReadCapacityUnits
  #     ServiceNamespace: dynamodb
  # ImageCountWCUScalableTarget:
  #   Type: AWS::ApplicationAutoScaling::ScalableTarget
  #   DependsOn:
  #     - ImageCountDynamoDBTable
  #   Properties: 
  #     MinCapacity: 1
  #     MaxCapacity: 30
  #     ResourceId: !Join ["", ["table/", !Ref ImageCountDynamoDBTable]]
  #     RoleARN: !GetAtt AutoScalingRole.Arn
  #     ScalableDimension: dynamodb:table:WriteCapacityUnits
  #     ServiceNamespace: dynamodb

  # ImageDataReadScalingPolicy: 
  #   Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
  #   Properties: 
  #     PolicyName: image-data-read-scaling-policy
  #     PolicyType: TargetTrackingScaling
  #     ScalingTargetId: 
  #       Ref: ImageDataRCUScalableTarget
  #     TargetTrackingScalingPolicyConfiguration: 
  #       TargetValue: 70
  #       ScaleInCooldown: 60
  #       ScaleOutCooldown: 60
  #       PredefinedMetricSpecification: 
  #         PredefinedMetricType: DynamoDBReadCapacityUtilization
  # ImageDataWriteScalingPolicy: 
  #   Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
  #   Properties: 
  #     PolicyName: image-data-write-scaling-policy
  #     PolicyType: TargetTrackingScaling
  #     ScalingTargetId: 
  #       Ref: ImageDataWCUScalableTarget
  #     TargetTrackingScalingPolicyConfiguration: 
  #       TargetValue: 70
  #       ScaleInCooldown: 60
  #       ScaleOutCooldown: 60
  #       PredefinedMetricSpecification: 
  #         PredefinedMetricType: DynamoDBWriteCapacityUtilization
  # ImageCountReadScalingPolicy: 
  #   Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
  #   Properties: 
  #     PolicyName: image-count-read-scaling-policy
  #     PolicyType: TargetTrackingScaling
  #     ScalingTargetId: 
  #       Ref: ImageCountRCUScalableTarget
  #     TargetTrackingScalingPolicyConfiguration: 
  #       TargetValue: 70
  #       ScaleInCooldown: 60
  #       ScaleOutCooldown: 60
  #       PredefinedMetricSpecification: 
  #         PredefinedMetricType: DynamoDBReadCapacityUtilization
  # ImageCountWriteScalingPolicy: 
  #   Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
  #   Properties: 
  #     PolicyName: image-count-write-scaling-policy
  #     PolicyType: TargetTrackingScaling
  #     ScalingTargetId: 
  #       Ref: ImageCountWCUScalableTarget
  #     TargetTrackingScalingPolicyConfiguration: 
  #       TargetValue: 70
  #       ScaleInCooldown: 60
  #       ScaleOutCooldown: 60
  #       PredefinedMetricSpecification: 
  #         PredefinedMetricType: DynamoDBWriteCapacityUtilization

  # AutoScalingRole: 
  #   Type: AWS::IAM::Role
  #   Properties: 
  #     AssumeRolePolicyDocument: 
  #       Version: "2012-10-17"
  #       Statement: 
  #         - Effect: Allow
  #           Principal: 
  #             Service: 
  #               - application-autoscaling.amazonaws.com
  #           Action: 
  #             - sts:AssumeRole
  #     Path: "/"
  #     Policies: 
  #       - PolicyName: autoscaling-role-policy
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement: 
  #             - Effect: Allow
  #               Action:          
  #                 - "dynamodb:DescribeTable"
  #                 - "dynamodb:UpdateTable"
  #                 - "cloudwatch:PutMetricAlarm"
  #                 - "cloudwatch:DescribeAlarms"
  #                 - "cloudwatch:GetMetricStatistics"
  #                 - "cloudwatch:SetAlarmState"
  #                 - "cloudwatch:DeleteAlarms"
  #               Resource: "*"


# Outputs:


