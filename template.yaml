AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: your-cat


Parameters:
  ResourcePrefix:
    Type: String
    Default: yourcat
  EnvironmentName:
    Type: String
    AllowedValues:
      - dev
      - prd
  ApiAllowOrigin:
    Type: String


Conditions:
  IsPrd: !Equals [!Ref EnvironmentName, prd]


Globals:
  Function:
    MemorySize: 256
    Timeout: 30
    Environment:
      Variables:
        LOG_LEVEL: !If [IsPrd, INFO, DEBUG]
        ENV_NAME: !Sub ${EnvironmentName}
        API_ALLOW_ORIGIN: !Sub ${ApiAllowOrigin}


Resources:
  ImageS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ResourcePrefix}-${EnvironmentName}-image
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
            AllowedOrigins:
              - '*'
  ImageS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ImageS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ImageS3Bucket
                - /*
            Principal: '*'
  ImageDataCacheBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ResourcePrefix}-${EnvironmentName}-image-data-cache

  RestApis:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${ResourcePrefix}-${EnvironmentName}
      StageName: !Sub ${ResourcePrefix}-${EnvironmentName}-apis
      Cors:
        AllowOrigin: !Sub "'${ApiAllowOrigin}'"
        AllowHeaders: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key, X-Amz-Security-Token'"
        AllowMethods: "'POST, OPTIONS'"

  GetImageFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: rust-cargolambda
      BuildProperties:
        Binary: get_image
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-${EnvironmentName}-get-image
      CodeUri: "."
      Handler: bootstrap
      Runtime: provided.al2
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref ImageDataCacheBucket
      Environment:
        Variables:
          CACHE_BUCKET_NAME: !Ref ImageDataCacheBucket
      Events:
        RestApis:
          Type: Api
          Properties:
            RestApiId: !Ref RestApis
            Path: /get-image
            Method: GET
  IsTheCatFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: rust-cargolambda
      BuildProperties:
        Binary: is_the_cat
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-${EnvironmentName}-is-the-cat
      CodeUri: "."
      Handler: bootstrap
      Runtime: provided.al2
      Policies:
        - RekognitionDetectOnlyPolicy: {}
      Events:
        RestApis:
          Type: Api
          Properties:
            RestApiId: !Ref RestApis
            Path: /is-the-cat
            Method: post
  PostPhotoFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: rust-cargolambda
      BuildProperties:
        Binary: post_photo
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-${EnvironmentName}-post-photo
      CodeUri: "."
      Handler: bootstrap
      Runtime: provided.al2
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref ImageS3Bucket
        - S3FullAccessPolicy:
            BucketName: !Ref ImageDataCacheBucket
        - DynamoDBCrudPolicy:
            TableName: !Sub ${ResourcePrefix}-${EnvironmentName}-image
      Environment:
        Variables:
          IMAGE_BUCKET_NAME: !Ref ImageS3Bucket
          CACHE_BUCKET_NAME: !Ref ImageDataCacheBucket
          IMAGE_TABLE_NAME: !Sub ${ResourcePrefix}-${EnvironmentName}-image
      Events:
        RestApis:
          Type: Api
          Properties:
            RestApiId: !Ref RestApis
            Path: /post-photo
            Method: POST

  ImageDataDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Sub ${ResourcePrefix}-${EnvironmentName}-image
      KeySchema: 
        - AttributeName: file_id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: file_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST 
